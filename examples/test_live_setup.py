# examples/test_live_setup.py
"""
Script de teste para validar a configura√ß√£o antes de executar o trading ao vivo.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

import mt5se as se
import pandas as pd
from datetime import datetime, timedelta

def test_mt5_connection():
    """Testa a conex√£o com o MetaTrader 5."""
    print("üîå Testando conex√£o com MetaTrader 5...")
    
    if not se.connect():
        print("‚ùå Falha ao conectar ao MT5")
        print("   - Verifique se o MT5 est√° aberto")
        print("   - Verifique se a conta demo est√° ativa")
        print("   - Verifique se o algoritmo trading est√° habilitado")
        return False
    
    print("‚úÖ Conectado ao MetaTrader 5")
    
    # Obt√©m informa√ß√µes da conta
    account_info = se.account_info()
    if account_info:
        print(f"   - Conta: {account_info.login}")
        print(f"   - Servidor: {account_info.server}")
        print(f"   - Saldo: ${account_info.balance:.2f}")
        print(f"   - Equity: ${account_info.equity:.2f}")
        print(f"   - Leverage: 1:{account_info.leverage}")
    
    return True

def test_assets_availability():
    """Testa a disponibilidade dos ativos."""
    print("\nüìä Testando disponibilidade dos ativos...")
    
    # Lista de ativos que ser√£o usados
    test_assets = {
        "Forex": ["EURUSD", "GBPUSD", "USDJPY"],
        "Stocks": ["AAPL", "MSFT", "GOOGL"],
        "Crypto": ["BTCUSD", "ETHUSD", "XRPUSD"]
    }
    
    available_assets = {}
    
    for category, assets in test_assets.items():
        print(f"   {category}:")
        available_assets[category] = []
        
        for asset in assets:
            try:
                # Testa se o ativo existe
                symbol_info = se.symbol_info(asset)
                if symbol_info is None:
                    print(f"     ‚ùå {asset}: N√£o dispon√≠vel")
                    continue
                
                # Testa se consegue obter dados
                bars = se.get_bars(asset, 10)
                if bars is None or bars.empty:
                    print(f"     ‚ùå {asset}: Sem dados")
                    continue
                
                # Obt√©m pre√ßo atual
                price = se.get_last(bars)
                if price <= 0:
                    print(f"     ‚ùå {asset}: Pre√ßo inv√°lido")
                    continue
                
                print(f"     ‚úÖ {asset}: ${price:.5f}")
                available_assets[category].append(asset)
                
            except Exception as e:
                print(f"     ‚ùå {asset}: Erro - {e}")
    
    return available_assets

def test_market_hours():
    """Testa se o mercado est√° aberto."""
    print("\nüïê Testando hor√°rios de mercado...")
    
    test_assets = ["EURUSD", "AAPL", "BTCUSD"]
    
    for asset in test_assets:
        try:
            is_open = se.is_market_open(asset)
            status = "üü¢ ABERTO" if is_open else "üî¥ FECHADO"
            print(f"   {asset}: {status}")
        except Exception as e:
            print(f"   {asset}: ‚ùå Erro - {e}")

def test_trading_functions():
    """Testa as fun√ß√µes de trading b√°sicas."""
    print("\nüíπ Testando fun√ß√µes de trading...")
    
    test_asset = "EURUSD"  # Usar forex que est√° sempre dispon√≠vel
    
    try:
        # Testa obten√ß√£o de posi√ß√£o atual
        current_shares = se.get_shares(test_asset)
        print(f"   Posi√ß√£o atual em {test_asset}: {current_shares}")
        
        # Testa obten√ß√£o de saldo
        balance = se.get_balance()
        print(f"   Saldo dispon√≠vel: ${balance:.2f}")
        
        # Testa c√°lculo de a√ß√µes que pode comprar
        bars = se.get_bars(test_asset, 2)
        if bars is not None and not bars.empty:
            price = se.get_last(bars)
            test_capital = 1000.0  # $1000 para teste
            affordable_shares = se.get_affor_shares(test_asset, price, test_capital)
            print(f"   Com ${test_capital} pode comprar {affordable_shares} de {test_asset} @ ${price:.5f}")
        
        # Testa cria√ß√£o de ordem (sem enviar)
        if affordable_shares > 0:
            test_order = se.buyOrder(test_asset, 1)  # Apenas 1 unidade para teste
            if se.checkOrder(test_order):
                print(f"   ‚úÖ Ordem de teste v√°lida")
            else:
                print(f"   ‚ùå Ordem de teste inv√°lida")
        
        print("   ‚úÖ Fun√ß√µes de trading funcionando")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro nas fun√ß√µes de trading: {e}")
        return False

def test_portfoliolib_imports():
    """Testa se consegue importar os componentes do portfoliolib."""
    print("\nüì¶ Testando imports do portfoliolib...")
    
    try:
        from portfoliolib import PortfolioManager, EqualWeightOptimizer
        print("   ‚úÖ PortfolioManager importado")
        print("   ‚úÖ EqualWeightOptimizer importado")
        
        from portfoliolib.agent_improved import ImprovedPortfolioAgent
        print("   ‚úÖ ImprovedPortfolioAgent importado")
        
        from live_trader.equal_weight_volatility_trader import EqualWeightVolatilityTrader
        print("   ‚úÖ EqualWeightVolatilityTrader importado")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro ao importar: {e}")
        return False

def run_all_tests():
    """Executa todos os testes."""
    print("üß™ EXECUTANDO TESTES DE CONFIGURA√á√ÉO")
    print("=" * 50)
    
    tests_passed = 0
    total_tests = 5
    
    # Teste 1: Conex√£o MT5
    if test_mt5_connection():
        tests_passed += 1
    
    # Teste 2: Ativos dispon√≠veis
    available_assets = test_assets_availability()
    if any(assets for assets in available_assets.values()):
        tests_passed += 1
        print(f"\n   üìã Ativos dispon√≠veis por categoria:")
        for category, assets in available_assets.items():
            if assets:
                print(f"     {category}: {', '.join(assets)}")
    
    # Teste 3: Hor√°rios de mercado
    test_market_hours()
    tests_passed += 1  # Sempre passa, apenas informativo
    
    # Teste 4: Fun√ß√µes de trading
    if test_trading_functions():
        tests_passed += 1
    
    # Teste 5: Imports
    if test_portfoliolib_imports():
        tests_passed += 1
    
    # Resultado final
    print("\n" + "=" * 50)
    print(f"üéØ RESULTADO DOS TESTES: {tests_passed}/{total_tests} passaram")
    
    if tests_passed == total_tests:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("   O sistema est√° pronto para trading ao vivo.")
    elif tests_passed >= 3:
        print("‚ö†Ô∏è ALGUNS TESTES FALHARAM")
        print("   O sistema pode funcionar, mas verifique os problemas.")
    else:
        print("‚ùå MUITOS TESTES FALHARAM")
        print("   Corrija os problemas antes de executar o trading ao vivo.")
    
    print("=" * 50)
    
    return tests_passed >= 3

if __name__ == "__main__":
    success = run_all_tests()
    
    if success:
        print("\nüöÄ Para executar o trading ao vivo, rode:")
        print("   python run_live_equal_weight_volatility.py")
    else:
        print("\nüõ†Ô∏è Corrija os problemas antes de continuar.")

